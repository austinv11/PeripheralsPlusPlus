buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        jcenter()
        maven { url = "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}

repositories {
    maven {
        url  "http://jcenter.bintray.com"
    }
    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "modmaven.k-4u.nl"
    }
    maven {
        name "JBoss"
        url = "https://repository.jboss.org/nexus/content/repositories/releases/"
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

ext.buildNumber = System.getenv("BUILD_ID") ?: "dev"
//version = "1.3.5-$buildNumber"
version = "1.3.7"
group= "com.austinv11.peripheralsplusplus" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Peripherals++"

minecraft {
    version = "1.12.2-14.23.0.2491"
    mappings = "snapshot_20170626"
    runDir = "run"
    replace("@VERSION@",project.version)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact sourceJar
            artifact deobfJar
        }
    }
}

bintray {
    user = 'austinv11'
    key = System.getenv("API_KEY")
    dryRun = false
    publish = true
    publications = ['mavenJava']
    pkg {
        repo = "maven"
        name = "PeripheralsPlusPlus"
        desc = "A ComputerCraft Addon"
        websiteUrl = "https://github.com/austinv11/PeripheralsPlusPlus"
        issueTrackerUrl = "https://github.com/austinv11/PeripheralsPlusPlus/issues"
        vcsUrl = "https://github.com/austinv11/PeripheralsPlusPlus.git"
        licenses = ["GPL v2"]
        publicDownloadNumbers = true
        version {
            name = project.version
        }
    }
}

configurations {
    compileBundle
}

ext.freettsVersion = "1.2.2"
dependencies {
    compile "codechicken:NotEnoughItems:1.12-2.4.0.231:deobf"
	compile "codechicken:CodeChickenLib:1.12-3.1.3.313:deobf"
    compileBundle "com.michaelwflaherty:cleverbotapi:1.0.2"
    compileBundle "com.fasterxml.jackson.core:jackson-databind:2.9.1"
    compileBundle "org.mobicents.external.freetts:cmulex:$freettsVersion"
    compileBundle "org.mobicents.external.freetts:en_us:$freettsVersion"
    compileBundle "org.mobicents.external.freetts:freetts:$freettsVersion"
    compileBundle "org.mobicents.external.freetts:mbrola:$freettsVersion"
    compileBundle "org.mobicents.external.freetts:cmu_us_kal:$freettsVersion"
    configurations.compile.extendsFrom(configurations.compileBundle)
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    manifest {
        attributes 'FMLAT': 'ppp_at.cfg'
    }
    for (Object depToBundle : configurations.compileBundle.collect()) {
        if (depToBundle.isDirectory())
            from depToBundle
        else if (depToBundle.toString().contains("freetts-${freettsVersion}.jar"))
            from(zipTree(depToBundle).matching {
                exclude "de/dfki/lt/freetts/mbrola/**"
            })
        else
            from(zipTree(depToBundle).matching {
                exclude "META-INF/LICENSE", "META-INF/NOTICE"
            })
    }
}

idea { 
    module { 
        inheritOutputDirs = true 
    } 
}

// deobf jars
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest {
        attributes 'FMLAT': 'ppp_at.cfg'
    }
}

build.dependsOn sourceJar, deobfJar
